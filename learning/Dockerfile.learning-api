FROM python:3.11-slim

WORKDIR /app

# Install system dependencies for audio processing and Intel optimizations
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    cmake \
    git \
    curl \
    wget \
    build-essential \
    libopenblas-dev \
    libssl-dev \
    libffi-dev \
    libpq-dev \
    libasound2-dev \
    libportaudio2 \
    libportaudiocpp0 \
    portaudio19-dev \
    intel-opencl-icd \
    ocl-icd-libopencl1 \
    && rm -rf /var/lib/apt/lists/*

# Install Intel Neural Processing Unit tools for hardware acceleration
RUN curl -L https://github.com/intel/intel-npu-acceleration-library/releases/latest/download/intel-npu-acceleration-library.tar.gz \
    | tar -xz -C /opt/ || echo "NPU library download failed, continuing without NPU optimization"

# Install Python dependencies for learning API
COPY requirements.learning-api.txt .
RUN pip install --no-cache-dir -r requirements.learning-api.txt

# Install PyTorch with Intel optimizations for CPU inference
RUN pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
RUN pip install intel-extension-for-pytorch

# Copy learning API application
COPY learning_api/ .

# Create models directory structure (will be mounted as volume)
RUN mkdir -p ./models/ensemble ./models/fine_tuned ./models/uk_specialized

# Create directories for data and logs
RUN mkdir -p /app/data /app/logs /app/cache /app/embeddings

# Set environment variables for Intel optimizations
ENV INTEL_EXTENSION_FOR_PYTORCH=1
ENV IPEX_CPU_OPTIMIZE=1
ENV OMP_NUM_THREADS=4
ENV MKL_NUM_THREADS=4
ENV KMP_AFFINITY=granularity=fine,compact,1,0

# FastAPI configuration
ENV FASTAPI_ENV=production
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH=/app

# Health check for FastAPI service
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose FastAPI port
EXPOSE 8080

# Run FastAPI with uvicorn
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8080", "--workers", "4"]